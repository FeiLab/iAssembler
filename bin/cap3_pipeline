#!/usr/bin/perl -w

=head1 NAME

 cap3_pipeline - the assembly pipeline using CAP3 as assembler

=head1 DESCRIPTION

 This script using CAP3 as assembler to assemble EST sequences in an iterative way and produce more accurate result. 
 Detail functions of the script were descripted at SUB(subroutine) part.
 
 Author : Yi zheng
 E-mail : yz357@cornell.edu
 Update : 02/25/2010

=cut
use strict;
use IO::File;
use Bio::SeqIO;

my $usage = q/
USAGE:
	cap3_pipeline    input   output   circle  parameter
	Note:Just run as a pipeline, not as a standalone script

/;

my $input = shift || die $usage;

my $output = shift || die $usage;

my $circle = shift || die $usage;

my $parameter = shift || die $usage;

my $working_dir = $ENV{'working_dir'};
my $current_dir = $ENV{'current_dir'};
my $debug_mode = $ENV{'debug_mode'};
my $log_dir = $ENV{'log_dir'};
my $log_file = $ENV{'log_file'};

#########################################################################
# parse input: 1st input is fasta file; 2nd input is cmf file           #
#########################################################################
my @input_array = split(/#/, $input);

my $input_seq = $input_array[1];
my $input_cmf = $input_array[2] if $input_array[2] =~ m/\w+/;

#########################################################################
# parse output: 1st output is uniseq; 2nd output is cmf file		#
#########################################################################
my @output_array = split(/#/, $output);

my $output_seq = $output_array[1];
my $output_cmf = $output_array[2];

#########################################################################
# parse output: 1st output is uniseq; 2nd output is cmf file            #
#########################################################################
my @para_array = split(/#/, $parameter);

my %para_hash = ();

my $para_num = 0;

if (@para_array > 2)
{
	for(my $ia=1; $ia<@para_array; $ia++)
	{
		if ($para_array[$ia] =~ m/\w+/)
		{
			$para_array[$ia] =~ s/_/ /ig;
			$para_hash{$ia} = $para_array[$ia];
			$para_num++;
		}
	}
}
else
{
	for(my $ib=1; $ib<=$circle; $ib++)
	{
		$para_array[1] =~ s/_/ /ig;
		$para_hash{$ib} = $para_array[1];
	}
}

if ($circle == 0)
{
	$circle = $para_num;
}

my $project_prefix = "cap";

my $run_dir = $working_dir."/".$project_prefix;

unless (-e $run_dir) { mkdir($run_dir); }

# copy est input fasta file to est1.fa
system("cp $input_seq $run_dir/$project_prefix"."1.fa") && die "Error at copy $input_seq to $project_prefix"."1.fa \n";

# copy last time cmf file to cap0.cmf;
if (defined $input_cmf)
{
	system("cp $input_cmf $run_dir/$project_prefix"."0.cmf") && die "Error at copy $input_cmf to  $project_prefix"."0.cmf \n";
}
else
{
	my $init_cmf_fh = IO::File->new(">$run_dir/$project_prefix"."0.cmf") || die "Error at create  $project_prefix"."0.cmf \n";
	print $init_cmf_fh "\n";
	$init_cmf_fh->close;
}

chdir "$run_dir" or die "cannot chdir to $run_dir $!\n";

#sleep(10);  die "test\n";

###############################################################################
# assembly once, combine result, produce uniseq result;
###############################################################################

my $start_time = localtime();
my $cap_start = qq'
=========================================================================
CAP3 Assemble Begin ( $start_time )
=========================================================================
';
write_log($cap_start) if $debug_mode == 1;

my $i;

for ($i=1; $i<=$circle; $i++)
{
	print "\nrunning CAP3 assembly cycle $i\n";

	################ assembly ###############
	my $project_name = $project_prefix.$i;
	
	my $cap3_para = $para_hash{$i};

	my $uniseq  = cap3_pipeline($project_name, $cap3_para, $i);

	################# next ##################
	my $next_i = $i+1;

	my $next_est = $project_prefix.$next_i.".fa";

	write_log("NEXTIME EST FILE -- ".$next_est."\n") if $debug_mode == 1;

	if ($i == $circle)
	{
		system ("cp $uniseq $output_seq") && die "can not copy uniseq to next est \n";
	}
	else
	{
		system ("cp $uniseq $next_est") && die "can not copy uniseq to next est \n";
	}

	############### combine contig && member files #################

	my $this_time_file;
	my $last_time_file;
	my $cmf_out_file;

	if ($i == 1)
	{
		$this_time_file = $project_name.".cmf";
		my $last_i = $i-1;
		$last_time_file = $project_prefix.$last_i.".cmf";
		$cmf_out_file = "CMF".$i.$last_i;
	}
	else 
	{	
		$this_time_file = $project_name.".cmf";

		my $last_i = $i-1;
		my $last_2i = $i-2;
		
		$last_time_file = "CMF".$last_i.$last_2i;
		$cmf_out_file = "CMF".$i.$last_i;
	
	}
	
	write_log("PROCESS CMF FILE -- ".$this_time_file."\t".$last_time_file."\t".$cmf_out_file."\n") if $debug_mode == 1;
	&com_cmf($this_time_file, $last_time_file, $cmf_out_file);

	if ($i == $circle)
	{
		system ("cp $cmf_out_file $output_cmf") && die "can not copy contig_member to next est \n";
	}
}
chdir $current_dir || die "cannot chdir to $current_dir $!\n";

#########################################################
# delete temp file and folder                           #
#########################################################
unless ($debug_mode == 1)
{
	system("rm -rf $run_dir") && die "Error at delete cap3 results\n";
}

my $end_time = localtime();
my $cap_end = qq'
=========================================================================
CAP3 Assemble End ( $end_time )
=========================================================================

=========================================================================
Quality Check and Error Correction Process Begin ($end_time)
=========================================================================
';
write_log($cap_end) if $debug_mode == 1;

print "\nperform post-assembly quality checking & error correction\n";

#################################################################
# kentnf                                                        #
#################################################################
=head1 SUBROUTINE PART

=head2 cap3_pipeline

 Function: assemble EST seqs using CAP3
 
 Input: project name (char)
        parameter (char) : CAP3 assembly parameters
	cycle time (int)
        
 Return: unique seqences (file name) 
=cut

sub cap3_pipeline
{
	my $cap3_usage = "Error in sub cap3_pipeline. \nUSAGE: \$unigene = &cap3_pipeline(project_name, parameter, times ) \n";	

	my $pj_name = shift || die $cap3_usage;   

	my $parameter = shift || die $cap3_usage;

	my $time = shift || die $cap3_usage;

	my $est_in = $pj_name.".fa";

	my $est_report = $log_dir."/cap3_".$time.".report";
	my $err_report = $log_dir."/cap3_".$time.".error";

	my $assembly_cmd;
	if ($debug_mode == 1) {
		$assembly_cmd = "cap3 ".$est_in." ".$parameter." > ".$est_report." 2> ".$err_report;
	} else {
		$assembly_cmd = "cap3 ".$est_in." ".$parameter." > report 2> error";
	}

	write_log("\nCAP3 COMMAND -- ".$assembly_cmd."\n") if $debug_mode == 1;

	system($assembly_cmd) && die "Error at $assembly_cmd\n";

	#convert result to contigs unigenes and contig member list;
	my $ace_in = $est_in.".cap.ace";

	my $ctg_oid_in = $est_in.".cap.contigs";

	unlink($ctg_oid_in.".links", $ctg_oid_in.".qual", $est_in.".cap.info", $est_in.".cap.singlets" );


	# after assembly job
	my $ace_out = $pj_name.".cmf";

	my $ctg_nid_out = $pj_name.".ctg";

	my $uniseq = $pj_name.".uniseq";

	write_log("PROCESS ACE FILE -- ".$ace_in."\t".$ace_out."\n") if $debug_mode == 1;

	write_log("PROCESS CTG FILE -- ".$ctg_oid_in."\t".$ctg_nid_out."\t".$uniseq."\n") if $debug_mode == 1;

	parse_ace($ace_in, $ace_out, $pj_name);

	convert_ctg($ctg_oid_in, $ctg_nid_out, $pj_name);

	get_uniseq($ctg_nid_out, $est_in, $ace_out, $uniseq);

	$uniseq =~ s/..\///;

	return $uniseq;
}

=head2 parse_ace

 Function: parce ace file. lines start with CO include contig id, start with RD include member id, QA have the information that can reject the end clip error and other error. The output is contig member file.

 Input: input ace file (file name)
        output file (filen name) 

 Note: output file is contig member file;

 Return: none
=cut
sub parse_ace
{
	my $usage = "\nUSAGE: &parse_ace(ace_in, cmf_file[ace_out], project_name)\n\n";
	my $ace_file_in = shift || die $usage;
	my $ace_file_out = shift || die $usage;
	my $pj_name = shift || die $usage;

	my $afi = IO::File->new($ace_file_in) || die "Error, can not input ace file to sub var $ace_file_in $!\n";
	my $afo = IO::File->new(">".$ace_file_out) ||  die "Error, can not open ace file $ace_file_out $!\n";

	my $contignum = 0;
	my $membernum = 0;

	while (my $line_afi = <$afi>)
	{
	      if ($line_afi =~ m/^CO/){
	          my @cid = split(/\s/, $line_afi);
	          print $afo "\n".$pj_name."_".$cid[1];
	          $contignum++;
	       }
	
	       if ($line_afi =~ m/^AF/){
	          my @mid = split(/\s/, $line_afi);
	          print $afo "\t".$mid[1];
	          $membernum++;
	       }

	}
	$afi->close;
	$afo->close;

	write_log("                    ORI_CONTIGS: $contignum \t ORI_MEMBERS: $membernum \n") if $debug_mode == 1;
}

=head2 convert_ctg

 Function: convert contig file old id to new id, like contig1 to est1 contig1

 Input: input contig sequences file with old id (file name)
	output contig sequences file with new id (file name)
	project name (char)

 Return: none
=cut
sub convert_ctg
{
	my $usage = "\nUSAGE: &convert_ctg(old_id_fasta, new_id_fasta, project_name)\n\n";
	my $ctg_oid_fa = shift || die $usage;
	my $ctg_nid_fa = shift || die $usage;
	my $pj_name = shift || die $usage;

	my $ctg_in = Bio::SeqIO->new(-format=>'fasta', -file=>$ctg_oid_fa);
	my $ctg_out = IO::File->new(">".$ctg_nid_fa);

	while ( my $seq = $ctg_in->next_seq() ) 
	{
		my $old_id = $seq->id;
		my $new_id = $pj_name."_".$old_id;
		print $ctg_out ">".$new_id."\n".$seq->seq."\n";
 	}
	$ctg_out->close;
}

=head2 get_uniseq

 Function: get unique sequences from previous assembly result, and the unique sequences is for next clustering.

 Input: input contig sequences (file name)
        input member sequences (file name)
        contig member file (file name)
        output unique sequences (file name)

 Return: none
=cut
sub get_uniseq
{
	my $usage = "USAGE\n &get_uniseq(contig.fa, est.fa, cmf, uniseq)\n\n";
	my $ctg = shift || die $usage;
	my $est = shift || die $usage;
	my $cmf = shift || die $usage;
	my $uni = shift || die $usage;

	# contig sequences to hash
	my %contig = ();
	my $in = Bio::SeqIO->new(-format=>'fasta', -file=>$ctg);
	while(my $inseq = $in -> next_seq )
	{
	      my $ctg_id = $inseq->id;
	      my $ctg_seq = $inseq->seq;
	      $contig{$ctg_id} = $ctg_seq;
	}

	# est sequences to hash
	my %est = ();
	my $in_est = Bio::SeqIO->new(-format=>'fasta', -file=>$est);
	while(my $inseq_est = $in_est -> next_seq )
	{
	      my $est_id = $inseq_est->id;
	      my $est_seq = $inseq_est->seq;
	      $est{$est_id} = $est_seq;
	}

	# del contigs's members from est base on cmf file
	my $cmfh = IO::File->new($cmf) || die "Can not open contig member file $cmf $! \n";
	while(my $cmf_line = <$cmfh>)
	{
		chomp($cmf_line);
		my @m = split(/\t/, $cmf_line);

		my $i;
		for($i=1; $i<@m; $i++)
		{
			delete $est{$m[$i]};
		}

	}
	$cmfh->close;

	# print uniseq sequence[include singlet and contigs]
	my $unfh = IO::File->new(">".$uni) || die "Can not open uniseq file $uni $!\n";

	my $ida;
	foreach $ida (sort keys %contig)
	{
	    print $unfh ">".$ida."\n".$contig{$ida}."\n";
	}
	
	my $idb;
	foreach $idb (sort keys %est)
	{
	    print $unfh ">".$idb."\n".$est{$idb}."\n";
	}

	$unfh->close;
}

=head2 com_cmf

 Function: merge two contig and member files in one contig member file.

 Input: contig member file (file name)
        previous contig member file (file name)
        output contig member file (file name)

 Return: none
=cut
sub com_cmf
{
	my $usage = "perl combin_ace.pl this_cmf[2nd]  last_cmf[1st]  out\n";

	my $file1 = shift || die $usage;  #this time
	my $file2 = shift || die $usage;  #last time
	my $out = shift || die $usage;

	############################################################
	# last time contig member file 
	# put it to hash
	############################################################

	my %member;

	my $last_fh = IO::File->new($file2) || die "can not open last cmf file $file2 $! \n";
	while(my $last_line = <$last_fh>)
	{
		if ($last_line =~ m/\w+/)
		{
			chomp($last_line);
			my @m2 = split(/\t/, $last_line, 2);
			$member{$m2[0]} = $m2[1];
		}
	}
	$last_fh->close;


	############################################################
	# this time contig member file
	# if find , and if no find
	############################################################
	
	my $out_fh = IO::File->new(">".$out) || die "Can not open out file $out $! \n";
	
	my $this_fh = IO::File->new($file1) || die "Can not open this cmf file $file1 $! \n";

	while(my $this_line = <$this_fh>)
	{
		chomp($this_line);
			
		if ($this_line =~ m/\w+/)
		{
			my @m1 = split(/\t/, $this_line);

			print $out_fh $m1[0];

			my $i;
			for($i=1; $i<@m1; $i++)
			{

				if(defined $member{$m1[$i]})
				{
					print $out_fh "\t".$member{$m1[$i]};
					delete $member{$m1[$i]};
				}
				else
				{
					print $out_fh "\t".$m1[$i];
				}
			}
			print $out_fh "\n";
		}
	}
	$this_fh->close;

	my $c_id;
	foreach $c_id (sort keys %member)
	{
	    print $out_fh "$c_id\t$member{$c_id}\n";
	}

	$out_fh->close;
}

=head2 write_log

 Function: write log information to log files.

 Input: content of log information

 Return: one
=cut
sub write_log
{
        my $content = shift;
        my $fh = IO::File->new(">>".$log_file) || die "Can not write info to log file $! \n";
        print $fh $content;
        $fh->close;
}

